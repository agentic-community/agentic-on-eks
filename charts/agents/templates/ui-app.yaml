{{- if .Values.ui.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-ui-app-service
  labels:
    app.kubernetes.io/name: ui-app
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: ui
spec:
  type: {{ .Values.ui.service.type | default "ClusterIP" }}
  ports:
  - port: {{ .Values.ui.service.port | default 80 }}
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: ui-app
    app.kubernetes.io/instance: {{ .Release.Name }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-ui-app-deployment
  labels:
    app.kubernetes.io/name: ui-app
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: ui
spec:
  replicas: {{ .Values.ui.replicaCount | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: ui-app
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ui-app
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
      - name: ui
        image: "{{ .Values.global.aws.accountId }}.dkr.ecr.{{ .Values.global.aws.region }}.amazonaws.com/{{ .Values.ui.image.repository | default "ui-app" }}:{{ .Values.ui.image.tag | default "latest" }}"
        imagePullPolicy: {{ .Values.ui.image.pullPolicy | default "IfNotPresent" }}
        ports:
        - name: http
          containerPort: 8501
          protocol: TCP
        env:
        - name: AWS_REGION
          value: {{ .Values.global.aws.region | quote }}
        - name: ADMIN_HOST
          value: "{{ .Release.Name }}-admin-agent-service.{{ .Release.Namespace }}.svc.cluster.local"
        - name: ADMIN_PORT
          value: "8080"
        - name: PORT
          value: "8501"
        - name: LOG_LEVEL
          value: "INFO"
        {{- if .Values.ui.demoMode.enabled }}
        - name: DEMO_MODE
          value: "true"
        - name: DEMO_USER_EMAIL
          value: {{ .Values.ui.demoMode.userEmail | default "demo@company.com" | quote }}
        - name: DEMO_USER_NAME
          value: {{ .Values.ui.demoMode.userName | default "Demo User" | quote }}
        {{- end }}
        {{- if eq .Values.mode "secure" }}
        - name: OKTA_DOMAIN
          value: {{ .Values.okta.domain | quote }}
        - name: OKTA_CLIENT_ID
          value: {{ .Values.okta.ui.clientId | quote }}
        - name: OKTA_CLIENT_SECRET
          value: {{ .Values.okta.ui.clientSecret | quote }}
        - name: OKTA_REDIRECT_URI
          value: {{ .Values.okta.ui.redirectUri | quote }}
        {{- end }}
        {{- with .Values.ui.env }}
        {{- range . }}
        - name: {{ .name }}
          {{- if .value }}
          value: {{ .value | quote }}
          {{- else if .valueFrom }}
          valueFrom:
            {{- toYaml .valueFrom | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- end }}
        resources:
          {{- toYaml (.Values.ui.resources | default (dict "requests" (dict "memory" "512Mi" "cpu" "250m") "limits" (dict "memory" "1Gi" "cpu" "500m"))) | nindent 10 }}
        {{- with .Values.ui.volumeMounts }}
        volumeMounts:
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.ui.volumes }}
      volumes:
        {{- toYaml . | nindent 6 }}
      {{- end }}
{{- end }}